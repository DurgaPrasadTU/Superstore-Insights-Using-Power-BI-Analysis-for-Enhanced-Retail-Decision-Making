Use classicmodels;
-- 1. Calculating the number of customers who made purchases from us between 2003 and 2005.
SELECT COUNT(customerNumber) AS Total_customers FROM customers;

-- 2.Letâ€™s make a Report of the name and city of customers who don't have sales representatives
SELECT customerNumber,customerName,city 
FROM customers WHERE 
salesRepEmployeeNumber IS NULL;

-- 3. Preparing a list of offices sorted by country, state, city.
SELECT country, state, city FROM offices
ORDER BY country, state, city;

-- 4.How many employees work for the company.
select count(employeeNumber)as Total_Employees from employees;

-- 5.What is the total of payments received?
select sum(amount)as Total_Payment from payments;

-- 6.How many Product Lines are available in Axon?
select productline from productlines;

-- 7.Payments greater than $100,000
SELECT * FROM payments WHERE amount > 100000;

-- 8.Let us find how many products in each product line?
SELECT productLine, count(productCode) as Total_No_products from 
products
group by productLine order by Total_No_products desc;

-- 9.The average percentage markup of the MSRP on buy Price.
SELECT ROUND(AVG(((MSRP - buyPrice) / buyPrice) * 100),2) AS 
average_markup_percentage
FROM products;

-- 10. Let us know number of employees based on their job titles
select count(employeeNumber) as total_employees, jobTitle from 
employees 
group by jobTitle;

-- 11.Report the Sales representative for each customer.
select customers.customerNumber, employees.employeeNumber, 
concat(employees.firstName, " ",employees.lastName)
as fullName from customers inner join employees on
customers.salesRepEmployeeNumber = employees.employeeNumber 
order by customers.customerNumber;

-- 12.List the amount paid by each customer.
select customerNumber , 
sum(amount) as Total_payment from payments 
group by customerNumber 
order by Total_payment desc;

-- 13.List the value of 'On Hold' orders.
SELECT o.orderNumber, SUM(od.quantityOrdered * od.priceEach) AS 
OrderValue, o.status
FROM orders o
INNER JOIN orderdetails od ON o.orderNumber = od.orderNumber
WHERE o.status = 'On Hold'
GROUP BY o.orderNumber; 

-- 14. Compute the total value ordered, total amount paid, and their difference for each customer for orders placed in 2004 and payments received in 2004
CREATE VIEW TotalOrdered2004 AS
SELECT
 o.customerNumber,
 SUM(od.quantityOrdered * od.priceEach) AS TotalOrdered

FROM
 orders o
JOIN
 orderdetails od ON o.orderNumber = od.orderNumber
WHERE
 YEAR(o.orderDate) = 2004
GROUP BY
 o.customerNumber;
 -- Now Let us create a View for the Total Paid:
CREATE VIEW TotalPaid2004 AS
SELECT
 c.customerNumber,
 SUM(p.amount) AS TotalPaid
FROM
 customers c
JOIN
 payments p ON c.customerNumber = p.customerNumber
WHERE
 YEAR(p.paymentDate) = 2004
GROUP BY
 c.customerNumber;

SELECT
 o.customerNumber,
 TotalOrdered,
 TotalPaid,
 TotalOrdered - TotalPaid AS Difference
FROM
 TotalOrdered2004 o
JOIN

 TotalPaid2004 p ON o.customerNumber = p.customerNumber;
 
 -- 15. Let us know what is the percentage value of each product in inventory sorted by the highest percentage first
 CREATE VIEW ProductInventoryValue AS
SELECT
 productCode,
 (quantityInStock * buyPrice) AS InventoryValue
FROM
 products;
 
 -- 16. Let us see the profit generated by each customer based on their orders.Also, see each customer's profit as a percentage of total profit. 
 WITH CustomerProfit AS (
 SELECT
 c.customerNumber,
 c.customerName,
 SUM((od.priceEach - p.buyPrice) * od.quantityOrdered) AS Profit
 FROM
 customers c
 JOIN
 orders o ON c.customerNumber = o.customerNumber
 JOIN
 orderdetails od ON o.orderNumber = od.orderNumber
 JOIN
 products p ON od.productCode = p.productCode
 GROUP BY
 c.customerNumber, c.customerName
),
TotalProfit AS (
 SELECT SUM(Profit) AS TotalProfit FROM CustomerProfit

)
SELECT
 cp.customerNumber,
 cp.customerName,
 cp.Profit,
 (cp.Profit / tp.TotalProfit) * 100 AS ProfitPercentage
FROM
 CustomerProfit cp
CROSS JOIN
 TotalProfit tp
ORDER BY
 cp.Profit DESC;
 
-- 17. The revenue generated by each sales representative based on the orders from the customers they serve
SELECT
 e.employeeNumber,
 CONCAT(e.firstName, ' ', e.lastName) AS SalesRepresentative,
 SUM(od.priceEach * od.quantityOrdered) AS Revenue
FROM
 employees e
JOIN
 customers c ON e.employeeNumber = c.salesRepEmployeeNumber
JOIN
 orders o ON c.customerNumber = o.customerNumber
JOIN
 orderdetails od ON o.orderNumber = od.orderNumber
GROUP BY
 e.employeeNumber, SalesRepresentative
ORDER BY
 Revenue DESC;
 
 -- 18.Let us calculate each salesperson's profit generated based on the purchases made by the customers they service.
 SELECT
 e.employeeNumber,
 CONCAT(e.firstName, ' ', e.lastName) AS SalesRepresentative,
 SUM((od.priceEach - p.buyPrice) * od.quantityOrdered) AS Profit
FROM
 employees e
JOIN
 customers c ON e.employeeNumber = c.salesRepEmployeeNumber
JOIN
 orders o ON c.customerNumber = o.customerNumber
JOIN
 orderdetails od ON o.orderNumber = od.orderNumber
JOIN
 products p ON od.productCode = p.productCode
GROUP BY
 e.employeeNumber, SalesRepresentative
ORDER BY
 Profit DESC;
 
 -- 19.Let us see the revenue generated by each product and sort it by product name.
 SELECT
 p.productCode,
 p.productName,
 SUM(od.priceEach * od.quantityOrdered) AS Revenue
FROM
 products p
JOIN
 orderdetails od ON p.productCode = od.productCode
GROUP BY
 p.productCode, p.productName
ORDER BY
 p.productName;
 
 -- 20. The profit generated by each product line.
 SELECT
 p.productLine,
 SUM((od.priceEach - pr.buyPrice) * od.quantityOrdered) AS Profit
FROM
 products p
JOIN
 orderdetails od ON p.productCode = od.productCode
JOIN
 products pr ON od.productCode = pr.productCode
GROUP BY
 p.productLine
ORDER BY
 Profit DESC;
 
 -- 21. Let us calculate the ratio for each product of sales for 2003 versus 2004.
 SELECT
 p.productCode,
 p.productName,
 COALESCE(SUM(CASE WHEN YEAR(o.orderDate) = 2003 THEN 
od.quantityOrdered * od.priceEach ELSE 0 END), 0) AS Sales2003,
 COALESCE(SUM(CASE WHEN YEAR(o.orderDate) = 2004 THEN 
od.quantityOrdered * od.priceEach ELSE 0 END), 0) AS Sales2004,
 CASE WHEN COALESCE(SUM(CASE WHEN YEAR(o.orderDate) = 2003 
THEN od.quantityOrdered * od.priceEach ELSE 0 END), 0) = 0 THEN NULL
 ELSE COALESCE(SUM(CASE WHEN YEAR(o.orderDate) = 2004 THEN 
od.quantityOrdered * od.priceEach ELSE 0 END), 0) /
 COALESCE(SUM(CASE WHEN YEAR(o.orderDate) = 2003 THEN 
od.quantityOrdered * od.priceEach ELSE 0 END), 0)
 END AS SALY_Ratio
FROM
 products p
LEFT JOIN
 orderdetails od ON p.productCode = od.productCode
LEFT JOIN
 orders o ON od.orderNumber = o.orderNumber
WHERE
 YEAR(o.orderDate) IN (2003, 2004)
GROUP BY
 p.productCode, p.productName
ORDER BY
 SALY_Ratio DESC;
              -- similar for year 2004-2005
SELECT
p.productCode,
 p.productName,
 COALESCE(SUM(CASE WHEN YEAR(o.orderDate) = 2004 THEN 
od.quantityOrdered * od.priceEach ELSE 0 END), 0) AS Sales2004,
 COALESCE(SUM(CASE WHEN YEAR(o.orderDate) = 2005 THEN 
od.quantityOrdered * od.priceEach ELSE 0 END), 0) AS Sales2005,
 CASE WHEN COALESCE(SUM(CASE WHEN YEAR(o.orderDate) = 2004 
THEN od.quantityOrdered * od.priceEach ELSE 0 END), 0) = 0 THEN NULL
 ELSE COALESCE(SUM(CASE WHEN YEAR(o.orderDate) = 2005 THEN 
od.quantityOrdered * od.priceEach ELSE 0 END), 0) /
 COALESCE(SUM(CASE WHEN YEAR(o.orderDate) = 2004 THEN 
od.quantityOrdered * od.priceEach ELSE 0 END), 0)
 END AS SALY_Ratio
FROM
 products p
LEFT JOIN
 orderdetails od ON p.productCode = od.productCode
LEFT JOIN
 orders o ON od.orderNumber = o.orderNumber
WHERE
 YEAR(o.orderDate) IN (2004, 2005)

GROUP BY
 p.productCode, p.productName
ORDER BY
 SALY_Ratio DESC;
 
 -- 